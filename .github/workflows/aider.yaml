name: Aider Auto-fix issues via external prompt

on:
  issues:
    types: [opened, edited]

jobs:
  auto-fix:
    runs-on: ubuntu-latest
    env:
      # default model; can be overridden per-run if you like
      AIDER_MODEL: gemini
      GEMINI_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install Aider
        run: |
          python -m pip install aider-install; aider-install
          pip install -U google-generativeai

      - name: Build prompt via external API
        shell: bash
        run: |
          # Use printf %q to safely quote title and body for shell evaluation
          ISSUE_TITLE_Q=$(printf '%q' "${{ github.event.issue.title }}")
          ISSUE_BODY_Q=$(printf '%q' "${{ github.event.issue.body }}")

          echo "Sending issue content to external API…"

          # Build JSON using jq --arg. Safely construct the command using the quoted variables.
          # We avoid direct eval by building the command parts.
          JSON_PAYLOAD=$(jq -n \
            --arg title "$ISSUE_TITLE_Q" \
            --arg body "$ISSUE_BODY_Q" \
            '{"body":{"issue_title":$title,"issue_body":$body}}')

          # Call your API
          # Use --data-binary to send the payload exactly as is
          API_RESULT=$(curl -s -w "\n%{http_code}" \
            -X POST "https://app.windmill.dev/api/r/test1245/issue-trigger" \
            -H "Content-Type: application/json" \
            --data-binary "$JSON_PAYLOAD" \
            --max-time 90)

          HTTP_CODE=$(echo "$API_RESULT" | tail -n1)
          BODY=$(echo "$API_RESULT" | sed '$d')

          # Save API response safely
          echo "$BODY" > /tmp/api_response.txt

          if [[ "$HTTP_CODE" -eq 200 ]]; then
            # Extract prompt safely with jq
            PROMPT=$(jq -r '.processed_prompt // .effective_body // .message // empty' /tmp/api_response.txt)
            if [[ -z "$PROMPT" ]]; then
              echo "::warning::API returned no prompt; falling back to raw issue."
              # Create fallback prompt safely using printf %s (quoting not needed for output)
              printf "Please fix the issue described below:\n\nTitle: %s\n\nBody:\n%s" \
                "${{ github.event.issue.title }}" \
                "${{ github.event.issue.body }}" > /tmp/prompt.txt
            else
              echo "$PROMPT" > /tmp/prompt.txt
            fi
          else
            echo "::error::API call failed (HTTP $HTTP_CODE). Falling back."
            # Create fallback prompt safely using printf %s
            printf "Please fix the issue described below:\n\nTitle: %s\n\nBody:\n%s" \
              "${{ github.event.issue.title }}" \
              "${{ github.event.issue.body }}" > /tmp/prompt.txt
          fi

          # write the final prompt
          mkdir -p .github/aider
          cat /tmp/prompt.txt > .github/aider/issue-prompt.txt

      - name: Probe Chat for Relevant Files
        id: probe_files
        run: |
          echo "Running probe-chat to find relevant files..."
          PROMPT_CONTENT=$(cat /tmp/prompt.txt)
          # Run probe-chat, redirect stderr to stdout to capture potential errors too
          PROMPT_WITH_PREFIX="I'm giving you an issue that needs to be fixed. Your role is to give me the files that are relevant to the issue. The issue is prepended with the word ISSUE.\\nISSUE: $PROMPT_CONTENT. Give me all the files relevant to this issue. Your output should be a single json array that can be parsed with programatic json parsing, with the relevant files. Example of output: [\\"file1.py\\", \\"file2.py\\"]"
          PROBE_OUTPUT=$(npx -y @buger/probe-chat@latest --message "$PROMPT_WITH_PREFIX" 2>&1)
          echo "Probe-chat raw output:"
          echo "$PROBE_OUTPUT"

          # Extract the JSON array part. Handles potential leading/trailing text.
          # Extracts content between the first '[' and the last ']' inclusive.
          JSON_FILES=$(echo "$PROBE_OUTPUT" | sed -n '/^\s*\[/,$p' | sed '/^\s*\]/q')
          echo "Extracted JSON block:"
          echo "$JSON_FILES"

          # Parse JSON, filter for non-empty strings, quote each for shell, join with spaces.
          # Default to empty string on any error (e.g., invalid JSON)
          FILES_LIST=$(echo "$JSON_FILES" | jq -e -r '. | map(select(type == "string" and . != "")) | map(@sh) | join(" ")' || echo "")
          echo "Formatted files list for aider: $FILES_LIST"

          echo "FILES_TO_EDIT=$FILES_LIST" >> $GITHUB_ENV

      - name: Run Aider with external prompt
        run: |
          echo "Files identified by probe-chat: ${{ env.FILES_TO_EDIT }}"
          aider \
            ${{ env.FILES_TO_EDIT }} \
            --model gemini/gemini-2.5-pro-preview-05-06 \
            --message-file .github/aider/issue-prompt.txt \
            --yes \
            --no-check-update \
            --auto-commits \
            --no-analytics \
            --no-stream

      - name: Clean up prompt file
        if: always() # Run this even if aider fails, to clean up
        run: rm -f .github/aider/issue-prompt.txt

      - name: Commit & push fixes
        if: ${{ success() }}
        run: |
          BRANCH_NAME="aider-fix-issue-${{ github.event.issue.number }}"
          git checkout -b $BRANCH_NAME
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git push origin $BRANCH_NAME

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "[Aider PR] Add fixes for issue #${{ github.event.issue.number }}"
          branch: aider-fix-issue-${{ github.event.issue.number }}
          delete-branch: true # Optional: delete the branch after merging the PR
          title: "[Aider] Fixes for Issue #${{ github.event.issue.number }}"
          body: |
            Addresses issue #${{ github.event.issue.number }}

            This PR was automatically created by the Aider workflow.

      - name: Comment on issue
        uses: peter-evans/create-or-update-comment@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
            ✅ Aider (via Gemini) has applied fixes based on the processed prompt.
