name: Call External Issue Analyzer

# on:
#   issues:
#     types: [opened]

permissions:
  issues: write # To post the comment back to the issue

jobs:
  trigger_external_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit # TODO: Lock down to ONLY your API endpoint URL

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: Install and Run Probe Search
        id: probe_search
        run: |
          echo "Installing probe tool..."
          curl -fsSL https://raw.githubusercontent.com/buger/probe/main/install.sh | bash

          echo "Performing probe search for 'login' in repository root"
          PROBE_RESULTS=$(probe search "login" --files-only ./ 2>&1 || echo "No results found")
          echo "Search complete"

          # Save results to file and output path for next step
          echo "$PROBE_RESULTS" > probe_results.txt
          echo "probe_results<<EOF" >> $GITHUB_OUTPUT
          cat probe_results.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Extract Issue Data
        id: issue_data
        run: |
          # Read probe results
          PROBE_RESULTS=$(cat probe_results.txt)

          # Prepare JSON payload - ensure proper escaping for multiline body/title
          JSON_PAYLOAD=$(jq -n \
            --arg repo "${{ github.repository }}" \
            --argjson num "${{ github.event.issue.number }}" \
            --arg title "${{ github.event.issue.title }}" \
            --arg body "${{ github.event.issue.body }}" \
            --arg actor "${{ github.triggering_actor }}" \
            --arg probe_results "$PROBE_RESULTS" \
            '{body: {repository: $repo, issue_number: $num, issue_title: $title, issue_body: $body, triggering_actor: $actor, probe_results: $probe_results}}')

          echo "Payload prepared."
          # Output payload to a file for the next step
          echo "$JSON_PAYLOAD" > payload.json
          echo "payload_path=payload.json" >> $GITHUB_OUTPUT

      - name: Call External Analysis API
        id: call_api
        run: |
          echo "Sending request to $ANALYZER_API_ENDPOINT..."

          # Use curl to send the POST request with JSON payload and Auth header
          API_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://app.windmill.dev/api/r/test1245/issue-trigger" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            --data-binary "@${{ steps.issue_data.outputs.payload_path }}" \
            --connect-timeout 10 \
            --max-time 120) # Adjust timeouts as needed

          # Extract HTTP status code and response body
          HTTP_CODE=$(echo "$API_RESPONSE" | tail -n1)
          RESPONSE_BODY=$(echo "$API_RESPONSE" | sed '$d')

          echo "API responded with HTTP Status Code: $HTTP_CODE"

          if [[ "$HTTP_CODE" -ne 200 ]]; then
            echo "::error::API call failed with status $HTTP_CODE. Response:"
            echo "$RESPONSE_BODY"
            # Decide how to handle failure - exit, or post a generic error message
            echo "comment_body=ðŸ¤– Error: Failed to analyze the issue via external service (Status: $HTTP_CODE)." > api_response.txt
            echo "api_success=false" >> $GITHUB_OUTPUT
          else
            echo "API call successful."
            # Assuming the API returns JSON like: {"status": "success", "comment": "Markdown body..."}
            # Extract the comment body using jq
            COMMENT=$(echo "$RESPONSE_BODY" | jq -r '.comment // "ðŸ¤– Error: Invalid response format from analysis service."')
            echo "$COMMENT" > api_response.txt
            echo "api_success=true" >> $GITHUB_OUTPUT
          fi
          echo "response_path=api_response.txt" >> $GITHUB_OUTPUT
