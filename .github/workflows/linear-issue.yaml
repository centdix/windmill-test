name: External Aider Issue Fix

on:
  repository_dispatch:
    types: [external_issue_fix]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      branch_name: ${{ steps.generate_branch_name.outputs.branch_name }}
      issue_title: ${{ steps.extract_info.outputs.issue_title }}
    steps:
      - name: Extract Issue Information
        id: extract_info
        run: |
          echo "issue_title=${{ github.event.client_payload.issue_title }}" >> $GITHUB_OUTPUT

      - name: Generate Branch Name
        id: generate_branch_name
        run: |
          ISSUE_ID="${{ github.event.client_payload.issue_id }}"
          BRANCH_NAME="aider-fix-linear-issue-$ISSUE_ID"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

  aider-common:
    needs: setup
    uses: ./.github/workflows/aider-common.yaml
    with:
      issue_title: ${{ github.event.client_payload.issue_title }}
      issue_body: ${{ github.event.client_payload.issue_body }}
      instruction: ${{ github.event.client_payload.instruction }}
      prompt_file_path: ".github/aider/issue-prompt.txt"
    secrets: inherit

  create-pr:
    needs: [setup, aider-common]
    runs-on: ubicloud-standard-8
    permissions:
      contents: write
      pull-requests: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@v2
        with:
          egress-policy: audit

      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and Push Changes
        id: commit_and_push
        env:
          BRANCH_NAME: ${{ needs.setup.outputs.branch_name }}
        run: |
          # Check if branch exists remotely
          if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
            echo "Branch $BRANCH_NAME already exists remotely, fetching it"
            git fetch origin $BRANCH_NAME
            git checkout $BRANCH_NAME
            git pull origin $BRANCH_NAME
          else
            echo "Creating new branch $BRANCH_NAME"
            git checkout -b $BRANCH_NAME
          fi

          # Check if there are any changes to commit
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -am "Auto-fix using Aider for external issue [skip ci]" || echo "No changes to commit"
          fi

          git push origin $BRANCH_NAME
          echo "Pushed to branch $BRANCH_NAME"
          echo "PR_BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        if: success() && steps.commit_and_push.outputs.PR_BRANCH_NAME != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_BRANCH: ${{ steps.commit_and_push.outputs.PR_BRANCH_NAME }}
          ISSUE_TITLE: ${{ needs.setup.outputs.issue_title }}
          ISSUE_ID: ${{ github.event.client_payload.issue_id }}
        run: |
          # Create PR description in a temporary file to avoid command line length limits
          cat > /tmp/pr-description.md << EOL
          This PR was created automatically by Aider to fix an external issue: ${ISSUE_TITLE}

          ## Aider Output
          \`\`\`
          $(cat .github/aider/aider-output.txt || echo "No output available")
          \`\`\`
          EOL

          # Create PR using the file for the body content
          gh pr create \
            --title "[Aider PR] Fix: ${ISSUE_TITLE}" \
            --body-file /tmp/pr-description.md \
            --head "$PR_BRANCH" \
            --base main || echo "PR already exists or couldn't be created"
